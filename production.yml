version: "3"

volumes:
  production_media: {}
  production_static: {}
  production_traefik: {}
  production_postgres_data: {}
  production_postgres_data_backups: {}

services:
  postgres: &postgres
    build:
      context: .
      dockerfile: ./deploy/production/postgres/Dockerfile
    image: tetrad_production_postgres
    restart: always
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    ports:
      - "5432:5432"
    env_file:
      - ./.envs/.production/.postgres

  landing: &landing
    build:
      context: .
      dockerfile: ./deploy/production/landing/Dockerfile
    command: ["nginx", "-g", "daemon off;"]
    image: tetrad_production_landing
    ports:
      - "3000:3000"
    depends_on:
      - cms
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.landing-https-rdrct.redirectscheme.scheme=https"
      - "traefik.http.routers.landing-http.middlewares=landing-https-rdrct"
      - "traefik.http.routers.landing-http.rule=Host(`tetradnk.ru`)"
      - "traefik.http.routers.landing-http.entrypoints=http"
      - "traefik.http.routers.landing-https.rule=Host(`tetradnk.ru`)"
      - "traefik.http.routers.landing-https.entrypoints=https"
      - "traefik.http.routers.landing-https.tls=true"
      - "traefik.http.routers.landing-https.tls.certresolver=default"
      - "traefik.http.services.landing-https.loadbalancer.server.port=3000"

  cms: &cms
    build:
      context: .
      dockerfile: ./deploy/production/cms/Dockerfile
    command: ["/start"]
    image: tetrad_production_cms
    volumes:
      - production_static:/var/tetrad/static
      - production_media:/var/tetrad/media
    depends_on:
      - postgres
    ports:
      - "9000:9000"
    env_file:
      - ./.envs/.production/.cms
      - ./.envs/.production/.postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.cms-https-rdrct.redirectscheme.scheme=https"
      - "traefik.http.routers.cms-http.middlewares=cms-https-rdrct"
      - "traefik.http.routers.cms-http.rule=Host(`cms.tetradnk.ru`)"
      - "traefik.http.routers.cms-http.entrypoints=http"
      - "traefik.http.routers.cms-https.rule=Host(`cms.tetradnk.ru`)"
      - "traefik.http.routers.cms-https.entrypoints=https"
      - "traefik.http.routers.cms-https.tls=true"
      - "traefik.http.routers.cms-https.tls.certresolver=default"
      - "traefik.http.services.cms-https.loadbalancer.server.port=9000"

  telegram: &telegram
    build:
      context: .
      dockerfile: ./deploy/local/telegram/Dockerfile
    command: ["/start"]
    image: tetrad_local_telegram
    depends_on:
      - postgres
    ports:
      - "5000:5000"
    env_file:
      - ./.envs/.production/.telegram
      - ./.envs/.production/.postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.telegram-https-rdrct.redirectscheme.scheme=https"
      - "traefik.http.routers.telegram-http.middlewares=telegram-https-rdrct"
      - "traefik.http.routers.telegram-http.rule=Host(`telegram.tetradnk.ru`)"
      - "traefik.http.routers.telegram-http.entrypoints=http"
      - "traefik.http.routers.telegram-https.rule=Host(`telegram.tetradnk.ru`)"
      - "traefik.http.routers.telegram-https.entrypoints=https"
      - "traefik.http.routers.telegram-https.tls=true"
      - "traefik.http.routers.telegram-https.tls.certresolver=default"
      - "traefik.http.services.telegram-https.loadbalancer.server.port=5000"

  traefik: &traefik
    build:
      context: .
      dockerfile: ./deploy/production/traefik/Dockerfile
    image: traefik
    restart: always
    depends_on:
      - cms
    volumes:
      - production_traefik:/etc/traefik/acme
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
